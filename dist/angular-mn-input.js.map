{"version":3,"sources":["mn-input/mn-input.directive.js","mn-input/mn-input.provider.js","app.js"],"names":["MnInputDirective","$compile","MnInput","link","scope","element","attributes","input","find","attr","ngModel","formName","closest","name","setValidations","text","messages","validation","validations","push","setMessage","message","document","createElement","setAttribute","textContent","label","appendChild","messagesRule","replace","Object","keys","forEach","querySelector","restrict","require","MnInputProvider","en","required","email","pt","locale","localStorage","this","$get","angular","module","$inject","directive","provider"],"mappings":"YAIA,SAASA,kBAAiBC,SAAUC,SAOlC,QAASC,MAAKC,MAAOC,QAASC,YAC5B,GAAIC,OAAQF,QAAQG,KAAK,QACzBD,OAAME,KAAK,WAAYH,WAAWI,SAClCT,SAASM,OAAOH,MAEhB,IAAIO,UAAWN,QAAQ,GAAGO,QAAQ,QAAQC,IAEtCP,YAAWO,MAAQF,WAAU,WAAA,GAQtBG,gBAAT,SAAwBD,MACtB,GAAME,MAAOb,QAAQc,SAASH,MACxBI,YACJJ,KAAAA,KACAE,KAAAA,KAEFG,aAAYC,KAAKF,aAQVG,WAAT,SAAoBH,YAClB,GAAII,SAAUC,SAASC,cAAc,OACrCF,SAAQG,aAAa,aAAcP,WAAWJ,MAC9CQ,QAAQI,YAAR,IAAsBR,WAAAF,KACtBW,MAAMC,YAAYN,UAzBhBO,aAAe,mDAChBC,QAAQ,YAAalB,UACrBkB,QAAQ,aAAcvB,WAAWO,MAEhCK,cACJY,QAAOC,KAAK7B,QAAQc,UAAUgB,QAAQlB,eAWtC,IAAIY,OAAQrB,QAAQ,GAAG4B,cAAc,QACrCP,OAAMF,aAAa,cAAeI,cAClCV,YAAYc,QAAQZ,YACpBnB,SAASyB,OAAOtB,UAjCpB,OACE8B,SAAU,IACV/B,KAAAA,KACAgC,QAAS,WCJb,QAASC,mBACP,GAAMlB,cACJmB,IACEC,SAAU,cACVC,MAAO,cAETC,IACEF,SAAU,gBACVC,MAAO,eAILE,OAASC,aAAaD,QAAU,KAChCzB,SAAWE,YAAYuB,OAE7BE,MAAKC,KAAO,WAAA,OAAA5B,SAAAA,WCnBd6B,QAAQC,OAAO,YACb,eFAF9C,iBAAiB+C,SAAW,WAAY,WADxCF,QACGC,OAAO,YACPE,UAAU,UAAWhD,kBCFxB6C,QACGC,OAAO,YACPG,SAAS,UAAWb","file":"angular-mn-input.js","sourcesContent":["angular\n  .module('mn-input')\n  .directive('mnInput', MnInputDirective)\n\nfunction MnInputDirective($compile, MnInput) {\n  return {\n    restrict: 'E',\n    link,\n    require: 'ngModel',\n  }\n\n  function link(scope, element, attributes) {\n    let input = element.find('input')\n    input.attr('ng-model', attributes.ngModel)\n    $compile(input)(scope)\n\n    let formName = element[0].closest('form').name\n\n    if (attributes.name && formName) {\n      let messagesRule = 'formName.$submitted && formName.inputName.$error'\n        .replace(/formName/g, formName)\n        .replace(/inputName/g, attributes.name)\n\n      let validations = []\n      Object.keys(MnInput.messages).forEach(setValidations)\n\n      function setValidations(name) {\n        const text = MnInput.messages[name]\n        const validation = {\n          name,\n          text,\n        }\n        validations.push(validation)\n      }\n\n      let label = element[0].querySelector('label')\n      label.setAttribute('ng-messages', messagesRule)\n      validations.forEach(setMessage)\n      $compile(label)(scope)\n\n      function setMessage(validation) {\n        let message = document.createElement('span')\n        message.setAttribute('ng-message', validation.name)\n        message.textContent = ` ${validation.text}`\n        label.appendChild(message)\n      }\n    }\n  }\n}\n","angular\n  .module('mn-input')\n  .provider('MnInput', MnInputProvider)\n\nfunction MnInputProvider() {\n  const validations = {\n    en: {\n      required: 'is required',\n      email: 'is invalid',\n    },\n    pt: {\n      required: 'é obrigatório',\n      email: 'é inválido',\n    },\n  }\n\n  const locale = localStorage.locale || 'en'\n  const messages = validations[locale]\n\n  this.$get = () => ({messages})\n}\n","angular.module('mn-input', [\n  'ngMessages',\n])\n"],"sourceRoot":"/source/"}